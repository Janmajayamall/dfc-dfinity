type UserId = principal;
type Timestamp = int;
type SubscriptionReputationScoreEvent = variant {
                                          didUpdateLeadershipBoard:
                                           vec
                                            record {
                                              reputationScoreObj:
                                               ReputationScore;
                                              userId: UserId;
                                            };};
type SubscriptionRatingEvent = variant {didUpdateRating: RatingUpdate;};
type SubscriptionContentEvent = variant {
                                  didFlagNewContent:
                                   record {
                                     content: Content;
                                     contentId: ContentId;
                                   };};
type SubscriptionCommentEvent = variant {
                                  didAddComment:
                                   record {
                                     comment: Comment;
                                     commentId: CommentId;
                                     contentId: ContentId;
                                   };};
type ReputationScore = 
 record {
   authorScore: float64;
   raterScore: float64;
   reputationScore: float64;
   timestamp: Timestamp;
   userId: UserId;
 };
type RatingValue = bool;
type RatingUpdate = 
 record {
   commentId: CommentId;
   contentId: ContentId;
   negativeDelta: int;
   positiveDelta: int;
   ratingObj: Rating;
 };
type Rating = 
 record {
   commentId: CommentId;
   rating: RatingValue;
   userId: UserId;
   validRating: bool;
 };
type ContentId = nat;
type Content = 
 record {
   id: ContentId;
   time: Timestamp;
   tokensBurnt: nat;
   url: text;
 };
type CommentId = nat;
type Comment = 
 record {
   contentId: ContentId;
   id: CommentId;
   "text": text;
   userId: UserId;
   username: text;
 };
service : {
  callbackForCommentEvent: (SubscriptionCommentEvent) -> () oneway;
  callbackForContentEvent: (SubscriptionContentEvent) -> () oneway;
  callbackForRatingEvent: (SubscriptionRatingEvent) -> () oneway;
  callbackForReputationScoreEvent: (SubscriptionReputationScoreEvent) ->
   () oneway;
  getNeedsHelpFeedContentIds: () -> (vec ContentId) query;
  getSatisfiedFeedContentIds: () -> (vec ContentId) query;
  init: () -> () oneway;
  scanNeedsHelpFeed: () -> () oneway;
  testFlaggedContentMap: () ->
   (vec
     record {
       comments:
        vec
         record {
           commentId: CommentId;
           ratings:
            record {
              negativeRatings: vec UserId;
              positiveRatings: vec UserId;
            };
         };
       contentId: ContentId;
     }) query;
}
